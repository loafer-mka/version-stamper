# +--------------------------------------------------------------------+
# | This Source Code Form is subject to the terms of the Mozilla       |
# | Public License, v. 2.0. If a copy of the MPL was not distributed   |
# | with this file, You can obtain one at http://mozilla.org/MPL/2.0/. |
# +--------------------------------------------------------------------+
#        email: Andrey Makarov <mka-at-mailru@mail.ru>
# Project home: https://github.com/loafer-mka/version-stamper.git
#
#               Copyright (c) Andrey Makarov 2023

function __PLUGIN_M_NOTICE__
{
	echo "   plugin-M          Matlab's class defiition within constant properties; eol=CR+LF"
}

function __PLUGIN_M_SAMPLE__
{
	echo "#plugin-M:        --gitignore  matlab_ver.m"
}

function __PLUGIN_M_ATTRIB__
{
	echo "text eol=crlf"
}

function __PLUGIN_M_GETVER__
{
	# strong name compare here - so changing version or changing leader/trailer will lead to rewrite target file
	sed --binary --regexp-extended --silent \
		-e "s/^(\s*${NAME_VERSION_TEXT}\s*=\s*')([^']*)('.*)$/\\2/p"
}

function __PLUGIN_M_CREATE__
{
	__STORE_CRLF__ "$1" <<END_OF_TEXT
classdef $(basename -s .m -- "$1" | sed -r -e 's/\W/_/g; s/__+/_/g; s/_+$//; s/^_+//')
	properties (Constant)
		${NAME_VERSION_ID} = hex2dec('${VERSION_ID}');
		${VERSION_LEADER}VERSION_HEX${VERSION_TRAILER} = '0x${VERSION_ID}';
		${NAME_VERSION_TEXT} = '${VERSION_TEXT}';
		${NAME_VERSION_BRANCH} = '${VERSION_BRANCH}${VERSION_DIRTY}';
		${NAME_VERSION_DATE} = '${VERSION_DATE}';
		${NAME_VERSION_SHORTDATE} = '${VERSION_SHORTDATE}';
		${NAME_VERSION_UNIXTIME} = ${VERSION_UNIXTIME};
		${NAME_VERSION_HOSTINFO} = '${VERSION_HOSTINFO}';
		${NAME_VERSION_AUTHORSHIP} = '${VERSION_AUTHORSHIP}';
		${NAME_VERSION_DECLARATION} = '${VERSION_DECLARATION}';
		${NAME_VERSION_COMMIT_AUTHOR} = '${VERSION_COMMIT_AUTHOR} <${VERSION_COMMIT_EMAIL}>';
		% if information below is based on parent commit's hash then prefix 'p:' will be used
		${NAME_VERSION_SHA_SHORT} = '${VERSION_SHA_SHORT}';
		${NAME_VERSION_SHA_LONG} = '${VERSION_SHA_LONG}';
	end
end
END_OF_TEXT
}

#function __AS_REGEX_M__
#{
#	arg="$@"
#	arg="${arg//\//\\\/}"
#	arg="${arg//''/''''/}"
#	echo "${arg}"
#}

function __PLUGIN_M_MODIFY__
{
	sed --binary --regexp-extended \
		-e "s/^(\s*)(\w*VERSION_ID\w*)(\s*=\s*hex2dec\(\s*')([^']*)('\s*\)\s*;.*)$/\\1${NAME_VERSION_ID}\\3${VERSION_ID}\\5/" \
		-e "s/^(\s*)(\w*VERSION_HEX\w*)(\s*=\s*')([^']*)('\s*;.*)$/\\1${VERSION_LEADER}NAME_VERSION_HEX${VERSION_TRAILER}\\30x${VERSION_ID}\\5/" \
		-e "s/^(\s*)(\w*VERSION_TEXT\w*)(\s*=\s*')([^']*)('\s*;.*)$/\\1${NAME_VERSION_TEXT}\\3${VERSION_TEXT//\//\\\/}\\5/" \
		-e "s/^(\s*)(\w*VERSION_BRANCH\w*)(\s*=\s*')([^']*)('\s*;.*)$/\\1${NAME_VERSION_BRANCH}\\3${VERSION_BRANCH//\//\\\/}${VERSION_DIRTY}\\5/" \
		-e "s/^(\s*)(\w*VERSION_DATE\w*)(\s*=\s*')([^']*)('\s*;.*)$/\\1${NAME_VERSION_DATE}\\3${VERSION_DATE}\\5/" \
		-e "s/^(\s*)(\w*VERSION_SHORTDATE\w*)(\s*=\s*')([^']+)('\s*;.*)$/\\1${NAME_VERSION_SHORTDATE}\\3${VERSION_SHORTDATE}\\5/" \
		-e "s/^(\s*)(\w*VERSION_UNIXTIME\w*)(\s*=\s*)([0-9]+)(\s*;.*)$/\\1${NAME_VERSION_UNIXTIME}\\3${VERSION_UNIXTIME}\\5/" \
		-e "s/^(\s*)(\w*VERSION_HOSTINFO\w*)(\s*=\s*')([^']*)('\s*;.*)$/\\1${NAME_VERSION_HOSTINFO}\\3${VERSION_HOSTINFO//\//\\\/}\\5/" \
		-e "s/^(\s*)(\w*VERSION_AUTHORSHIP\w*)(\s*=\s*')([^']*)('\s*;.*)$/\\1${NAME_VERSION_AUTHORSHIP}\\3${VERSION_AUTHORSHIP//\//\\\/}\\5/" \
		-e "s/^(\s*)(\w*VERSION_DECLARATION\w*)(\s*=\s*')([^']*)('\s*;.*)$/\\1${NAME_VERSION_DECLARATION}\\3${VERSION_DECLARATION//\//\\\/}\\5/" \
		-e "s/^(\s*)(\w*VERSION_COMMIT_AUTHOR\w*)(\s*=\s*')([^']*)('\s*;.*)$/\\1${NAME_VERSION_COMMIT_AUTHOR}\\3${VERSION_COMMIT_AUTHOR//\//\\\/} <${VERSION_COMMIT_EMAIL//\//\\\/}>\\5/" \
		-e "s/^(\s*)(\w*VERSION_SHA_SHORT\w*)(\s*=\s*')([^']*)('\s*;.*)$/\\1${NAME_VERSION_SHA_SHORT}\\3${VERSION_SHA_SHORT}\\5/" \
		-e "s/^(\s*)(\w*VERSION_SHA_LONG\w*)(\s*=\s*')([^']*)('\s*;.*)$/\\1${NAME_VERSION_SHA_LONG}\\3${VERSION_SHA_LONG}\\5/" \
	| __STORE_CRLF__ "$1"
}
